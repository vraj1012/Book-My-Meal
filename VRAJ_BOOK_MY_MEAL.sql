-- NAME : CHOWDHARY VRAJ PARESHKUMAR

CREATE DATABASE BookMyMeal
USE BookMyMeal

-- TABLES FOR BOOK_MY_MEAL

--1 EMPLOYEE

CREATE TABLE EMPLOYEE(
EMPLOYEEID INT IDENTITY PRIMARY KEY,
FIRSTNAME NVARCHAR(50),
LASTNAME NVARCHAR(50),
PHONENUMBER CHAR(10) CONSTRAINT CHKPHNO CHECK (PHONENUMBER LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
DOB DATE,
GENDER NVARCHAR(15),
DEPTID INT CONSTRAINT FKDEPTID FOREIGN KEY (DEPTID) REFERENCES DEPARTMENT(DEPTID),
EMAIL NVARCHAR(50) CONSTRAINT CHKEMAIL CHECK (EMAIL LIKE '%@%.com'),
[PASSWORD] NVARCHAR(50),
ISACTIVE BIT CONSTRAINT DFISACTIVE DEFAULT (1),
ISDELETED BIT CONSTRAINT DFISDELETED DEFAULT (0),
REGISTRATIONDATE DATETIME CONSTRAINT DFREGDATE DEFAULT (GETDATE()),
MODIFIEDON DATETIME
)

--2 DEPARTMENT
CREATE TABLE DEPARTMENT(
DEPTID INT PRIMARY KEY,
DEPTNAME NVARCHAR(50)
)

--3 ORDERLOGS
CREATE TABLE ORDERLOGS
(
ORDERID INT IDENTITY PRIMARY KEY,
EMPLOYEEIDBOOKEDBY INT CONSTRAINT FKEMPIDBOOKEDBY FOREIGN KEY (EMPLOYEEIDBOOKEDBY) REFERENCES EMPLOYEE(EMPLOYEEID),
EMPLOYEEIDBOOKEDFOR INT CONSTRAINT FKEMPIDBOOKEDFOR FOREIGN KEY (EMPLOYEEIDBOOKEDFOR) REFERENCES EMPLOYEE(EMPLOYEEID),
ORDERTYPE NVARCHAR(40) CONSTRAINT CHKBOOKINGTYPE CHECK (ORDERTYPE = 'BULK' OR ORDERTYPE='SINGLE'),
MEALTYPE NVARCHAR(40) CONSTRAINT CHKMEALTYPE CHECK (MEALTYPE = 'LUNCH' OR MEALTYPE = 'DINNER' OR MEALTYPE = 'BOTH'),
BOOKINGDATE DATETIME CONSTRAINT DFBOOKINGDATE DEFAULT (GETDATE()),
BOOKINGINITIALDATE DATE,
BOOKINGENDDATE DATE,
AMOUNT MONEY,
ORDERSTATUS NVARCHAR(40)
)

--4 HOLIDAYLIST
CREATE TABLE HOLIDAYLIST
(
HOLIDAYS DATE
)
INSERT INTO HOLIDAYLIST VALUES('2023-12-07')
INSERT INTO HOLIDAYLIST VALUES('2023-12-19')
INSERT INTO HOLIDAYLIST VALUES('2023-12-25')
--5 COUPONDETAILS
CREATE TABLE COUPONDETAILS
(
COUPONID INT IDENTITY PRIMARY KEY,
EMPLOYEEID INT,
EMPLOYEENAME NVARCHAR(100),
ORDERID INT,
MEALTYPE NVARCHAR(40),
COUPONNUMBER INT,
DATEOFREDEMPTION DATE,
DAYOFREDEMPTION NVARCHAR(50)
)

--6 COUPONREDEMPTIONLOGS
CREATE TABLE COUPONREDEMPTIONLOGS
(
COUPONID INT PRIMARY KEY,
EMPLOYEEID INT,
EMPLOYEENAME NVARCHAR(100),
ORDERID INT,
MEALTYPE NVARCHAR(40),
COUPONNUMBER INT,
REDEEMDATE DATETIME,
REDEEMDAY NVARCHAR(30),
REDEEMSTATUS NVARCHAR(25)
)

-- 7 LOGIN LOGS
SELECT * FROM LOGINLOGS
CREATE TABLE LOGINLOGS
(
EMPLOYEEID INT,
EMAIL NVARCHAR(50),
TOKEN NVARCHAR(MAX),
LOGINTIME DATETIME 
)

-- STORED PROCEDURES

-- 1 SP'S FOR EMPLOYEE TABLE

-- 1. TO INSERT DATA INTO EMPLOYEE TABLE
SELECT * FROM EMPLOYEE
CREATE OR ALTER PROC SPINSERTEMP
@FIRSTNAME NVARCHAR(50),
@LASTNAME NVARCHAR(50),
@PHONENUMBER CHAR(10),
@DOB DATE,
@GENDER NVARCHAR(15),
@DEPTID INT,
@EMAIL NVARCHAR(50),
@PASSWORD NVARCHAR(50)
AS
BEGIN

	INSERT INTO EMPLOYEE
	(
		FIRSTNAME,
		LASTNAME,
		PHONENUMBER,
		DOB,
		GENDER,
		DEPTID,
		EMAIL,
		PASSWORD
	)
	VALUES
	(
		@FIRSTNAME,
		@LASTNAME,
		@PHONENUMBER,
		@DOB,
		@GENDER,
		@DEPTID,
		@EMAIL,
		@PASSWORD
	)

END

-- EXECUTING SP TO INSERT DATA INTO EMPLOYEE TABLE

EXEC SPINSERTEMP @FIRSTNAME = 'VRAJ',@LASTNAME = 'CHOWDHARY',@PHONENUMBER = '9999999999',@DOB = '2000-12-10',@GENDER = 'MALE',@DEPTID = 1,@EMAIL = 'v@gmail.com',@PASSWORD = 'PASS@1234'
EXEC SPINSERTEMP @FIRSTNAME = 'TOM',@LASTNAME = 'RED',@PHONENUMBER = '1234567890',@DOB = '2001-10-10',@GENDER = 'MALE',@DEPTID = 1,@EMAIL = 't@gmail.com',@PASSWORD = 't123'
EXEC SPINSERTEMP @FIRSTNAME = 'JUNE',@LASTNAME = 'BLUE',@PHONENUMBER = '5432167890',@DOB = '1998-11-17',@GENDER = 'FEMALE',@DEPTID = 1,@EMAIL = 'j@gmail.com',@PASSWORD = 'j123@'
SELECT * FROM EMPLOYEE
SELECT * FROM DEPARTMENT


-- 2. UPDATE SP TO CHANGE PASSWORD

CREATE OR ALTER PROC SPCHANGEPASSWORD
@EMAIL NVARCHAR(50),
@PASSWORD NVARCHAR(100),
@NEWPASSWORD NVARCHAR(100)
AS 
BEGIN
	BEGIN TRY

	IF(@EMAIL IN (SELECT EMAIL FROM EMPLOYEE))
	BEGIN
		UPDATE EMPLOYEE SET PASSWORD = @NEWPASSWORD,MODIFIEDON = GETDATE() WHERE EMAIL = @EMAIL AND PASSWORD = @PASSWORD
	END

	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID USERNAME !',16,1)
	END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END

-- EXECUTING SP TO CHANGE THE EXISTING PASSWORD
EXEC SPCHANGEPASSWORD @EMAIL = 'v@gmail.com',@PASSWORD = 'PASS@1234',@NEWPASSWORD = 'V123'
SELECT * FROM EMPLOYEE

-- 3. DELETE RECORD PERMANENTLY BY PASSING EMPLOYEE_ID AS A PARAMETER

CREATE OR ALTER PROC SPDELETEEMPLOYEE
@EMPLOYEEID INT
AS
BEGIN
	BEGIN TRY
		IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
		BEGIN
			DELETE FROM EMPLOYEE WHERE EMPLOYEEID = @EMPLOYEEID
		END

		ELSE
		BEGIN 
			RAISERROR('ERROR : ENTER VALID EMPLOYEE ID!',16,1)
		END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END

-- EXECUTING SP TO DELETE A RECORD PERMANENTLY FROM TABLE
EXEC SPDELETEEMPLOYEE @EMPLOYEEID = 7

-- 4. FETCH ALL RECORD FROM EMPLOYEE TABLE

CREATE OR ALTER PROC SPGETEMPDETAILS
AS
BEGIN
	SELECT * FROM EMPLOYEE
END


-- EXECUTING SP TO FETCH ALL RECORDS FROM EMPLOYEE TABLE
EXEC SPGETEMPDETAILS

-- 5. FETCH EMPLOYEE RECORD BY PASSING EMPLOYEE_ID AS PARAMETER

CREATE OR ALTER PROC SPGETEMPDETAILSBYID
@EMPLOYEEID INT
AS
BEGIN
	BEGIN TRY

	IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
	BEGIN
		SELECT * FROM EMPLOYEE WHERE EMPLOYEEID = @EMPLOYEEID
	END
	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID EMPLOYEE ID !',16,1)	
	END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END


-- EXECUTING SP TO FETCH AN EMPLOYEE RECORD FROM EMPLOYEE TABLE
EXEC SPGETEMPDETAILSBYID @EMPLOYEEID = 1

-- 6. TO SOFT DELETE EMPLOYEE RECORD

CREATE OR ALTER PROC SPSDELEMP
@EMPLOYEEID INT
AS 
BEGIN

	BEGIN TRY

	IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
	BEGIN
		UPDATE EMPLOYEE SET ISDELETED = 1, ISACTIVE = 0 WHERE EMPLOYEEID = @EMPLOYEEID
	END

	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID EMPLOYEE ID !',16,1)
	END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END

-- EXECUTING SP TO SOFT DELETE AN EMPLOYEE
EXEC SPSDELEMP @EMPLOYEEID = 7
SELECT * FROM EMPLOYEE

-- 2 SP'S FOR ORDERLOGS TABLE

-- 1 SP TO PLACE ORDER IN BULK

CREATE OR ALTER PROC SPPLACEORDERBULK 
@EMPLOYEEIDBOOKEDBY INT,
@EMPLOYEEIDBOOKEDFOR INT,
@MEALTYPE NVARCHAR(40),
@BOOKINGINITIALDATE DATE,
@BOOKINGENDDATE DATE
AS
BEGIN
	BEGIN TRY
		
		--THE START DATE OF ORDER SHOULD ALWAYS BE SAME AS TODAY'S DATE OR AFTER IT 
		--THE END DATE OF ORDER SHOULD BE WITHIN THE 3 MONTHS FROM CURRENT DATE
		IF(@BOOKINGINITIALDATE >= CONVERT(DATE,GETDATE()) AND @BOOKINGENDDATE<= DATEADD(MONTH, 3, CONVERT(DATE,GETDATE())) AND @BOOKINGENDDATE >= CONVERT(DATE,GETDATE()))
		BEGIN
		DECLARE @DAYCALC DATE,@AMOUNT MONEY

		SET @DAYCALC = @BOOKINGINITIALDATE
		SET @AMOUNT = 0
		
		IF(@MEALTYPE='LUNCH' OR @MEALTYPE='DINNER') 
		BEGIN

		WHILE(@DAYCALC <= @BOOKINGENDDATE)
			BEGIN
				-- MONDAY TO FRIDAY
				IF(DATEPART(WEEKDAY,@DAYCALC) IN (2,3,4,5,6) AND @DAYCALC NOT IN (SELECT HOLIDAYS FROM HOLIDAYLIST))
				BEGIN
					SET @AMOUNT += 70
					--PRINT CONCAT('AMOUNT : ',@AMOUNT)
					--PRINT CONCAT('DATE : ',@DAY_CALC)
					SET @DAYCALC = DATEADD(DAY,1,@DAYCALC)
				END
				ELSE
				BEGIN
					SET @DAYCALC = DATEADD(DAY,1,@DAYCALC)
				END

			END
			END
			ELSE IF(@MEALTYPE='BOTH')
			BEGIN
					WHILE(@DAYCALC <= @BOOKINGENDDATE)
			BEGIN
				-- MONDAY TO FRIDAY
				IF(DATEPART(WEEKDAY,@DAYCALC) IN (2,3,4,5,6) AND @DAYCALC NOT IN (SELECT HOLIDAYS FROM HOLIDAYLIST))
				BEGIN
					SET @AMOUNT += 140
					--PRINT CONCAT('AMOUNT : ',@AMOUNT)
					--PRINT CONCAT('DATE : ',@DAY_CALC)
					SET @DAYCALC = DATEADD(DAY,1,@DAYCALC)
				END
				ELSE
				BEGIN
					SET @DAYCALC = DATEADD(DAY,1,@DAYCALC)
				END

			END
			END

			
			INSERT INTO ORDERLOGS
			(EMPLOYEEIDBOOKEDBY,
			EMPLOYEEIDBOOKEDFOR,
			ORDERTYPE,
			MEALTYPE,
			BOOKINGINITIALDATE,
			BOOKINGENDDATE,
			AMOUNT,
			ORDERSTATUS) 
			VALUES 
			(@EMPLOYEEIDBOOKEDBY,
			@EMPLOYEEIDBOOKEDFOR,
			'BULK',
			@MEALTYPE,
			@BOOKINGINITIALDATE,
			@BOOKINGENDDATE,
			@AMOUNT,
			'BOOKED')

			END

			ELSE
			BEGIN
				RAISERROR('ERROR : SELECT VALID DATE !',16,1);
			END
		END TRY

		BEGIN CATCH
			THROW
		END CATCH


END


EXEC SPPLACEORDERBULK @EMPLOYEEIDBOOKEDBY = 1,@EMPLOYEEIDBOOKEDFOR = 1,@MEALTYPE='LUNCH',@BOOKINGINITIALDATE='2025-2-24',@BOOKINGENDDATE='2025-2-28'
EXEC SPPLACEORDERBULK @EMPLOYEEIDBOOKEDBY = 1,@EMPLOYEEIDBOOKEDFOR = 1,@MEALTYPE='DINNER',@BOOKINGINITIALDATE='2023-12-7',@BOOKINGENDDATE='2023-12-14'
EXEC SPPLACEORDERBULK @EMPLOYEEIDBOOKEDBY = 1,@EMPLOYEEIDBOOKEDFOR = 1,@MEALTYPE='BOTH',@BOOKINGINITIALDATE='2023-12-11',@BOOKINGENDDATE='2024-3-17'
SELECT * FROM ORDERLOGS
SELECT * FROM COUPONDETAILS
TRUNCATE TABLE COUPONDETAILS

-- 2 SP TO PLACE SINGLE ORDER (QUICK BUY)

CREATE OR ALTER PROC SPPLACEORDERSINGLE 
@EMPLOYEEIDBOOKEDBY INT,
@EMPLOYEEIDBOOKEDFOR INT,
@MEALTYPE NVARCHAR(40)
AS
BEGIN
		BEGIN TRY

		DECLARE @AMOUNT MONEY
		IF(@MEALTYPE = 'BOTH')
		BEGIN
			SET @AMOUNT=140
		END
		ELSE IF (@MEALTYPE ='LUNCH' OR @MEALTYPE='DINNER')
		BEGIN
			SET @AMOUNT=70
		END

		IF(DATEPART(WEEKDAY,DATEADD(DAY,1,GETDATE())) IN (2,3,4,5,6) AND DATEADD(DAY,1,GETDATE()) NOT IN (SELECT * FROM HOLIDAYLIST))
		BEGIN
			INSERT INTO ORDERLOGS
			(EMPLOYEEIDBOOKEDBY,
			EMPLOYEEIDBOOKEDFOR,
			ORDERTYPE,
			MEALTYPE,
			BOOKINGINITIALDATE,
			BOOKINGENDDATE,
			AMOUNT,
			ORDERSTATUS) 
			VALUES 
			(@EMPLOYEEIDBOOKEDBY,
			@EMPLOYEEIDBOOKEDFOR,
			'SINGLE',
			@MEALTYPE,
			DATEADD(DAY,1,GETDATE()),
			DATEADD(DAY,1,GETDATE()),
			@AMOUNT,
			'BOOKED')
		END

		ELSE
		BEGIN

			RAISERROR('ERROR : SELECT VALID DATE !',16,1)

		END

		END TRY

		BEGIN CATCH
			THROW
		END CATCH

END

EXEC SPPLACEORDERSINGLE @EMPLOYEEIDBOOKEDBY=1 , @EMPLOYEEIDBOOKEDFOR=1 , @MEALTYPE = 'LUNCH'
EXEC SPPLACEORDERSINGLE @EMPLOYEEIDBOOKEDBY=1 , @EMPLOYEEIDBOOKEDFOR=1 , @MEALTYPE = 'DINNER'
EXEC SPPLACEORDERSINGLE @EMPLOYEEIDBOOKEDBY=1 , @EMPLOYEEIDBOOKEDFOR=1 , @MEALTYPE = 'BOTH'

SELECT * FROM ORDERLOGS
SELECT * FROM COUPONDETAILS
-- 3 SP FOR CANCELING AN ORDER 
CREATE OR ALTER PROC SPCANCELORDER
@ORDERID INT
AS
BEGIN
	
	BEGIN TRY

	DECLARE @BOOKINGDATE DATE
	SET @BOOKINGDATE = (SELECT CONVERT(DATE,BOOKINGDATE) FROM ORDERLOGS WHERE ORDERID = @ORDERID)

	-- CHECKING IF THE ORDERID EXISTS IN THE ORDERLOGS TABLE AND SPECIFYING THAT THE ORDER CAN ONLY BE CANCELLED ON THE SAME DAY OF BOOKING
	IF(@ORDERID IN (SELECT ORDERID FROM ORDERLOGS) AND @BOOKINGDATE=CONVERT(DATE,GETDATE()))
	BEGIN
	UPDATE ORDERLOGS SET ORDERSTATUS = 'CANCELLED' WHERE ORDERID = @ORDERID
	END

	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID ORDER ID  OR YOUR ORDER CANNOT BE CANCELLED!',16,1)
	END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END

EXEC SPCANCELORDER @ORDERID = 5
SELECT * FROM ORDERLOGS
SELECT * FROM COUPONDETAILS


-- 4 SP TO FETCH ORDERLOGS FOR PARTICULAR EMPLOYEE ID 

CREATE OR ALTER PROC SPGETORDERLOGSBYEMPLOYEEID
@EMPLOYEEID INT
AS 
BEGIN
	
	BEGIN TRY

	IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
	BEGIN
	SELECT * FROM ORDERLOGS WHERE EMPLOYEEIDBOOKEDBY = @EMPLOYEEID AND ORDERSTATUS = 'BOOKED'
	END

	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID EMPLOYEE ID !',16,1)
	END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END

EXEC SPGETORDERLOGSBYEMPLOYEEID @EMPLOYEEID = 1

-- TRIGGER FOR COUPON_DETAILS TABLE

-- 1 TRIGGER TO GENERATE COUPONS FOR COUPON_DETAILS TABLE

CREATE OR ALTER TRIGGER TRGCOUPONDETAILS ON ORDERLOGS
AFTER INSERT
AS 
BEGIN
	
	DECLARE @EMPLOYEEID INT,@EMPLOYEENAME NVARCHAR(100),@ORDERID INT,@EMPLOYEEIDBOOKEDBY INT,@EMPLOYEEIDBOOKEDFOR INT,@BOOKINGINITIALDATE DATE,@BOOKINGENDDATE DATE,@COUPONNUMBER INT,@DAYOFREDEMPTION NVARCHAR(50),@MEALTYPE NVARCHAR(40)
	--INSERTED TEMP TABLE WHERE INSERTED VALUES ARE STORED
	--SELECT @EMPLOYEEIDBOOKEDBY = EMPLOYEEIDBOOKEDBY FROM INSERTED
	--SELECT @EMPLOYEEIDBOOKEDFOR = EMPLOYEEIDBOOKEDFOR FROM INSERTED
	SELECT @BOOKINGINITIALDATE = BOOKINGINITIALDATE FROM INSERTED
	SELECT @BOOKINGENDDATE = BOOKINGENDDATE FROM INSERTED
	SELECT @MEALTYPE = MEALTYPE FROM INSERTED

	-- FETCHING THE LASTEST ORDERID
	SET @ORDERID = (SELECT TOP 1 ORDERID FROM ORDERLOGS WHERE ORDERSTATUS = 'BOOKED' ORDER BY ORDERID DESC)
	
	-- FETCHING EMPLOYEE_ID FROM ORDER_ID
	SET @EMPLOYEEID = (SELECT EMPLOYEEIDBOOKEDFOR FROM ORDERLOGS WHERE ORDERID = @ORDERID)

	-- FETCHING NAME FROM EMPLOYEEID
	SET @EMPLOYEENAME = (SELECT CONCAT(FIRSTNAME,' ',LASTNAME) FROM EMPLOYEE WHERE EMPLOYEEID=@EMPLOYEEID)

	
	--COUPON FOR MEALTYPE-LUNCH
	IF(@MEALTYPE='LUNCH')
	BEGIN --1

	--GENERATING FIRST COUPONNUMBER 
	SET @COUPONNUMBER =  ROUND(RAND(),6)*1000000

	-- ITERATING AND INCREMENTING THE INITIAL DATE UNTIL IT IS EQUIVALENT TO END DATE

	WHILE(@BOOKINGINITIALDATE <= @BOOKINGENDDATE)
	BEGIN --2

		-- GENERATING UNIQUE COUPON NUMBER ALWAYS FOR EACH COUPON
		 

		WHILE(@COUPONNUMBER IN (SELECT COUPONNUMBER FROM COUPONDETAILS))
		BEGIN --3
			SET @COUPONNUMBER = ROUND(RAND(),6)*1000000
		END --3

		IF(DATEPART(WEEKDAY,@BOOKINGINITIALDATE) IN (2,3,4,5,6) AND @BOOKINGINITIALDATE NOT IN (SELECT * FROM HOLIDAYLIST))
		BEGIN --4

		-- SET DAYOFREDEMPTION TO GET DAY NAME
		SET @DAYOFREDEMPTION = DATENAME(WEEKDAY,@BOOKINGINITIALDATE)

		INSERT INTO COUPONDETAILS 
		(
		EMPLOYEEID,
		EMPLOYEENAME,
		ORDERID,
		MEALTYPE,
		COUPONNUMBER,
		DATEOFREDEMPTION,
		DAYOFREDEMPTION
		)
		VALUES
		(
		@EMPLOYEEID,
		@EMPLOYEENAME,
		@ORDERID,
		@MEALTYPE,
		@COUPONNUMBER,
		@BOOKINGINITIALDATE,
		@DAYOFREDEMPTION
		)
		
		-- INCREMENTING INITIALBOOKINGDATE
		SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --4

		ELSE
		BEGIN --5
			SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --5

	END --2

	END --1

	ELSE IF(@MEALTYPE='DINNER')
	BEGIN --1
	--GENERATING FIRST COUPONNUMBER 
	SET @COUPONNUMBER =  ROUND(RAND(),6)*1000000

	-- ITERATING AND INCREMENTING THE INITIAL DATE UNTIL IT IS EQUIVALENT TO END DATE

	WHILE(@BOOKINGINITIALDATE <= @BOOKINGENDDATE)
	BEGIN --2

		-- GENERATING UNIQUE COUPON NUMBER ALWAYS FOR EACH COUPON
		 

		WHILE(@COUPONNUMBER IN (SELECT COUPONNUMBER FROM COUPONDETAILS))
		BEGIN --3
			SET @COUPONNUMBER = ROUND(RAND(),6)*1000000
		END --3

		IF(DATEPART(WEEKDAY,@BOOKINGINITIALDATE) IN (2,3,4,5,6) AND @BOOKINGINITIALDATE NOT IN (SELECT * FROM HOLIDAYLIST))
		BEGIN --4

		-- SET DAYOFREDEMPTION TO GET DAY NAME
		SET @DAYOFREDEMPTION = DATENAME(WEEKDAY,@BOOKINGINITIALDATE)

		INSERT INTO COUPONDETAILS 
		(
		EMPLOYEEID,
		EMPLOYEENAME,
		ORDERID,
		MEALTYPE,
		COUPONNUMBER,
		DATEOFREDEMPTION,
		DAYOFREDEMPTION
		)
		VALUES
		(
		@EMPLOYEEID,
		@EMPLOYEENAME,
		@ORDERID,
		@MEALTYPE,
		@COUPONNUMBER,
		@BOOKINGINITIALDATE,
		@DAYOFREDEMPTION
		)
		
		-- INCREMENTING INITIALBOOKINGDATE
		SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --4

		ELSE
		BEGIN --5
			SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --5
	
	END --2

	END --1

	ELSE IF(@MEALTYPE = 'BOTH')
	BEGIN --1
	--GENERATING FIRST COUPONNUMBER 
	SET @COUPONNUMBER =  ROUND(RAND(),6)*1000000

	-- ITERATING AND INCREMENTING THE INITIAL DATE UNTIL IT IS EQUIVALENT TO END DATE

	WHILE(@BOOKINGINITIALDATE <= @BOOKINGENDDATE)
	BEGIN --2

		-- GENERATING UNIQUE COUPON NUMBER ALWAYS FOR EACH COUPON
		 

		WHILE(@COUPONNUMBER IN (SELECT COUPONNUMBER FROM COUPONDETAILS))
		BEGIN --3
			SET @COUPONNUMBER = ROUND(RAND(),6)*1000000
		END --3

		IF(DATEPART(WEEKDAY,@BOOKINGINITIALDATE) IN (2,3,4,5,6) AND @BOOKINGINITIALDATE NOT IN (SELECT * FROM HOLIDAYLIST))
		BEGIN --4

		-- SET DAYOFREDEMPTION TO GET DAY NAME
		SET @DAYOFREDEMPTION = DATENAME(WEEKDAY,@BOOKINGINITIALDATE)

		-- GENERATING COUPON FOR LUNCH
		INSERT INTO COUPONDETAILS 
		(
		EMPLOYEEID,
		EMPLOYEENAME,
		ORDERID,
		MEALTYPE,
		COUPONNUMBER,
		DATEOFREDEMPTION,
		DAYOFREDEMPTION
		)
		VALUES
		(
		@EMPLOYEEID,
		@EMPLOYEENAME,
		@ORDERID,
		'LUNCH',
		@COUPONNUMBER,
		@BOOKINGINITIALDATE,
		@DAYOFREDEMPTION
		)

		-- AGAIN GENERATING UNIQUE COUPON FOR DINNER ON SAME DAY
		WHILE(@COUPONNUMBER IN (SELECT COUPONNUMBER FROM COUPONDETAILS))
		BEGIN --5
			SET @COUPONNUMBER = ROUND(RAND(),6)*1000000
		END --5

		INSERT INTO COUPONDETAILS 
		(
		EMPLOYEEID,
		EMPLOYEENAME,
		ORDERID,
		MEALTYPE,
		COUPONNUMBER,
		DATEOFREDEMPTION,
		DAYOFREDEMPTION
		)
		VALUES
		(
		@EMPLOYEEID,
		@EMPLOYEENAME,
		@ORDERID,
		'DINNER',
		@COUPONNUMBER,
		@BOOKINGINITIALDATE,
		@DAYOFREDEMPTION
		)
		
		-- INCREMENTING INITIALBOOKINGDATE
		SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --4

		ELSE
		BEGIN --6
			SET @BOOKINGINITIALDATE = DATEADD(DAY,1,@BOOKINGINITIALDATE)
		END --6

	END --2

	END --1

END

--2 TRIGGER TO DELETE COUPONS IF ORDER IS CANCELLED
CREATE OR ALTER TRIGGER TRGDELETECOUPONDETAILSONCANCELLATION ON ORDERLOGS
AFTER UPDATE
AS 
BEGIN

	DECLARE @ORDERID INT,@ORDERSTATUS NVARCHAR(50)
	SELECT @ORDERID = ORDERID FROM INSERTED
	SELECT @ORDERSTATUS = ORDERSTATUS FROM INSERTED
	
	IF(@ORDERSTATUS='CANCELLED')
	BEGIN
	DELETE FROM COUPONDETAILS WHERE ORDERID = @ORDERID
	END

END


-- 3 SP TO REDEEM COUPON FROM COUPONDETAILS TABLE AND DELETE THAT COUPON

CREATE OR ALTER PROC SPREDEEMCOUPON
@COUPONNUMBER INT
AS 
BEGIN

	BEGIN TRY
	IF(@COUPONNUMBER IN (SELECT COUPONNUMBER FROM COUPONDETAILS))
	BEGIN
		
		BEGIN TRY
		IF(CONVERT(DATE,GETDATE()) = (SELECT DATEOFREDEMPTION FROM COUPONDETAILS WHERE COUPONNUMBER = @COUPONNUMBER))
		--IF('2023-12-08' = (SELECT DATEOFREDEMPTION FROM COUPONDETAILS WHERE COUPONNUMBER = @COUPONNUMBER))
		
		BEGIN

			DELETE FROM COUPONDETAILS WHERE COUPONNUMBER = @COUPONNUMBER
			
		END

		ELSE
		BEGIN
			RAISERROR('ERROR : THIS COUPON CANNOT BE REDEEMED TODAY !',16,1)
		END
		END TRY

		BEGIN CATCH
		THROW
		END CATCH

	END
	
	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID COUPON NUMBER !',16,1)
	END
	END TRY

	BEGIN CATCH
	THROW
	END CATCH

END

--EXECUTING SP
SELECT * FROM COUPONDETAILS
EXEC SPREDEEMCOUPON @COUPON_NUMBER = 23771

-- 4 TRIGGER FOR COUPON DETAILS TABLE TO REDEEM THE COUPON AND DELETE ITS RECORD AND ADD ITS LOG TO COUPON REDEMPTION TABLE

CREATE OR ALTER TRIGGER TRGREDEMPTIONLOG ON COUPONDETAILS
AFTER DELETE
AS
BEGIN

	DECLARE @COUPONID INT,@EMPLOYEEID INT,@EMPLOYEENAME NVARCHAR(100),@ORDERID INT,@MEALTYPE NVARCHAR(40),@COUPONNUMBER INT,@REDEEMDATE DATE,@REDEEMDAY NVARCHAR(30)

	SELECT @COUPONID = COUPONID FROM DELETED
	SELECT @EMPLOYEEID = EMPLOYEEID FROM DELETED
	SELECT @EMPLOYEENAME = EMPLOYEENAME FROM DELETED
	SELECT @ORDERID = ORDERID FROM DELETED
	SELECT @MEALTYPE = MEALTYPE FROM DELETED
	SELECT @COUPONNUMBER = COUPONNUMBER FROM DELETED
	SELECT @REDEEMDAY = DAYOFREDEMPTION FROM DELETED
	

	INSERT INTO COUPONREDEMPTIONLOGS VALUES
	(
		@COUPONID,
		@EMPLOYEEID,
		@EMPLOYEENAME,
		@ORDERID,
		@MEALTYPE,
		@COUPONNUMBER,
		GETDATE(),
		@REDEEMDAY,
		'REDEEMED'
	)
	

END

-- 4 SP TO FETCH COUPONS OF AN EMPLOYEE BY PASSING EMPLOYEE_ID AS PARAMETER
CREATE OR ALTER PROC SPGETEMPLOYEECOUPONS
@EMPLOYEEID INT 
AS
BEGIN
	BEGIN TRY

	IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
	BEGIN
		SELECT * FROM COUPONDETAILS WHERE EMPLOYEEID = @EMPLOYEEID
	END

	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID EMPLOYEE ID !',16,1)
	END

	END TRY

	BEGIN CATCH 
		THROW
	END CATCH

END

-- EXECUTING SP
EXEC SPGETEMPLOYEECOUPONS @EMPLOYEEID = 1

-- 5 FETCH THE LATEST REDEEMED COUPON OF AN EMPLOYEE BY PASSING EMPLOYEEID 
CREATE OR ALTER PROC SPGETREDEEMEDCOUPONDETAILS
@EMPLOYEEID INT
AS
BEGIN

	BEGIN TRY
		
		IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
		BEGIN
			SELECT TOP 1 * FROM COUPONREDEMPTIONLOGS WHERE EMPLOYEEID = @EMPLOYEEID ORDER BY COUPONID DESC
		END

		ELSE
		BEGIN
			RAISERROR('ERROR : ENTER VALID EMPLOYEEID',16,1)
		END
	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END

--EXEC SPGETREDEEMEDCOUPONDETAILS
EXEC SPGETREDEEMEDCOUPONDETAILS @EMPLOYEEID = 1
SELECT * FROM COUPONREDEMPTIONLOGS

-- TESTING FOR BULK ORDER

EXEC SPPLACEORDERBULK @EMPLOYEEIDBOOKEDBY= 1,@EMPLOYEEIDBOOKEDFOR=1,@MEALTYPE='LUNCH',@BOOKINGINITIALDATE='2023-12-7',@BOOKINGENDDATE='2023-12-14'
EXEC SPPLACEORDERBULK @EMPLOYEEIDBOOKEDBY= 1,@EMPLOYEEIDBOOKEDFOR=1,@MEALTYPE='BOTH',@BOOKINGINITIALDATE='2023-12-7',@BOOKINGENDDATE='2023-12-14'

SELECT * FROM ORDERLOGS
SELECT * FROM COUPONDETAILS

EXEC SPREDEEMCOUPON @COUPONNUMBER = 460506
SELECT * FROM COUPONREDEMPTIONLOGS


TRUNCATE TABLE ORDERLOGS
TRUNCATE TABLE COUPONDETAILS
TRUNCATE TABLE COUPONREDEMPTIONLOGS

-- TESTING FOR SINGLE ORDER

EXEC SPPLACEORDERSINGLE @EMPLOYEEIDBOOKEDBY=2 , @EMPLOYEEIDBOOKEDFOR=2


-- TOKEN SP 

CREATE OR ALTER PROCEDURE SPVERIFYLOGINCREDENTIALS
@EMAIL NVARCHAR(50),
@PASSWORD NVARCHAR(50)
AS
BEGIN
	IF EXISTS (SELECT 1 FROM EMPLOYEE WHERE EMAIL = @EMAIL AND PASSWORD = @PASSWORD)
	BEGIN
		SELECT 1
	END
	ELSE
	BEGIN
		SELECT 0
	END
END

-- EXEC SP
SELECT * FROM EMPLOYEE
EXEC SPVERIFYLOGINCREDENTIALS @EMAIL = 'v@gmail.com',@PASSWORD = 'Vraj@demo123'

 -- CREATING SP TO STORE TOKEN

 CREATE OR ALTER PROC SPSTORETOKEN
 @EMAIL NVARCHAR(50),
 @TOKEN NVARCHAR(MAX)
 AS 
 BEGIN
	DECLARE @EMPLOYEEID INT
	SELECT @EMPLOYEEID = EMPLOYEEID FROM EMPLOYEE WHERE EMAIL = @EMAIL

	INSERT INTO LOGINLOGS VALUES (@EMPLOYEEID,@EMAIL,@TOKEN,GETDATE())
	

 END

 -- CREATING SP TO FETCH EMPLOYEEID FROM EMAIL ID PASSED IN LOGIN CREDENTIALS
 CREATE OR ALTER PROC SPGETEMPIDBYLOGINCREDENTIAL
 @EMAIL NVARCHAR(50)
 AS
 BEGIN

	BEGIN TRY
	IF(@EMAIL IN (SELECT EMAIL FROM EMPLOYEE))
	BEGIN
		SELECT EMPLOYEEID FROM EMPLOYEE WHERE EMAIL = @EMAIL
	END
	
	ELSE
	BEGIN
		RAISERROR('ERROR : ENTER VALID EMAIL !',16,1)
	END
	END TRY

	BEGIN CATCH
		THROW
	END CATCH
 END

 --EXEC SP
 EXEC SPGETEMPIDBYLOGINCREDENTIAL @EMAIL = 'v@gmail.com'

 -- SP TO RETRIEVE DATES FOR BOOKED ORDERS BY PASSING EMPLOYEEID AS A PARAMETER
 CREATE OR ALTER PROC SPSHOWBOOKINGDATES
 @EMPLOYEEID INT
 AS
 BEGIN

	BEGIN TRY
		
		IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
		BEGIN

			SELECT TOP 1 BOOKINGINITIALDATE,BOOKINGENDDATE FROM ORDERLOGS	WHERE EMPLOYEEIDBOOKEDFOR = @EMPLOYEEID AND ORDERSTATUS='BOOKED' ORDER BY ORDERID DESC

		END

		ELSE
		BEGIN
			RAISERROR('ERROR : ENTER VALID EMPLOYEEID',16,1)
		END


	END TRY

	BEGIN CATCH
		THROW	
	END CATCH

 END

 -- EXEC SP
EXEC SPSHOWBOOKINGDATES @EMPLOYEEID = 1

--  SP TO GET START DATE OF LATEST PLACED ORDER BY PASSING EMPLOYEEID AS PARAMETER
 CREATE OR ALTER PROC SPSHOWBOOKINGSTARTDATE
 @EMPLOYEEID INT
 AS
 BEGIN

	BEGIN TRY
		
		IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
		BEGIN

			SELECT TOP 1 BOOKINGINITIALDATE FROM ORDERLOGS	WHERE EMPLOYEEIDBOOKEDFOR = @EMPLOYEEID AND ORDERSTATUS='BOOKED' ORDER BY ORDERID DESC

		END

		ELSE
		BEGIN
			RAISERROR('ERROR : ENTER VALID EMPLOYEEID',16,1)
		END


	END TRY

	BEGIN CATCH
		THROW	
	END CATCH

 END

 -- EXEC SPSHOWBOOKINGSTARTDATE
 EXEC SPSHOWBOOKINGSTARTDATE @EMPLOYEEID=1

 --  SP TO GET END DATE OF LATEST PLACED ORDER BY PASSING EMPLOYEEID AS PARAMETER
 CREATE OR ALTER PROC SPSHOWBOOKINGENDDATE
 @EMPLOYEEID INT
 AS
 BEGIN

	BEGIN TRY
		
		IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEE))
		BEGIN

			SELECT TOP 1 DATEADD(DAY,1,BOOKINGENDDATE) FROM ORDERLOGS	WHERE EMPLOYEEIDBOOKEDFOR = @EMPLOYEEID AND ORDERSTATUS='BOOKED' ORDER BY ORDERID DESC

		END

		ELSE
		BEGIN
			RAISERROR('ERROR : ENTER VALID EMPLOYEEID',16,1)
		END


	END TRY

	BEGIN CATCH
		THROW	
	END CATCH

 END
 
 --EXEC SPSHOWBOOKINGENDDATE
 EXEC SPSHOWBOOKINGENDDATE @EMPLOYEEID = 1

 select * from employee
 select * from loginlogs
 SELECT * FROM ORDERLOGS
 
 select * from COUPONDETAILS

 
 TRUNCATE TABLE LOGINLOGS
 TRUNCATE TABLE ORDERLOGS
 TRUNCATE TABLE COUPONDETAILS
 TRUNCATE TABLE COUPONREDEMPTIONLOGS

 SELECT * FROM EMPLOYEE
 SELECT * FROM ORDERLOGS
 SELECT * FROM COUPONDETAILS
 SELECT * FROM COUPONREDEMPTIONLOGS
 SELECT * FROM LOGINLOGS